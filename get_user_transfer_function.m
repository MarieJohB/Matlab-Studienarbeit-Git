function G = get_user_transfer_function()
    % GET_USER_TRANSFER_FUNCTION
    % ----------------------------
    % This function creates a modal UI window that allows the user to input
    % the numerator and denominator coefficients for a transfer function.
    % The UI is styled to match the Auto-Tuning interface with panel sections,
    % improved spacing, and consistent styling.
    
    % Define colors that match the Auto-Tuning interface
    appColors = struct(...
        'background', [0.95 0.95 0.97], ...       % Light gray background to match auto-tune controller
        'panelHeader', [0.2 0.4 0.7], ...         % Blue header
        'panelBg', [0.95 0.95 0.97], ...          % Light gray panel
        'primary', [0.3 0.6 0.9], ...             % Blue buttons
        'confirm', [0.3 0.8 0.3], ...             % Green confirm button
        'cancel', [0.8 0.3 0.3], ...              % Red cancel button
        'text', [0.2 0.2 0.2], ...                % Dark text
        'lightText', [1 1 1]);                    % White text for dark backgrounds
    
    % Create a modal UI figure with fixed height
    fig = uifigure('Name', 'Transfer Function Input', ...
                   'Position', [100 100 500 480], 'WindowStyle', 'modal', ...
                   'Color', appColors.background);
                   
    % Title panel
    titlePanel = uipanel(fig, 'Position', [10 425 480 35], ...
                        'BackgroundColor', appColors.panelHeader, ...
                        'BorderType', 'none');
    titleLabel = uilabel(titlePanel, 'Text', 'Transfer Function Input', ...
        'Position', [0 0 480 35], 'FontSize', 16, 'FontWeight', 'bold', ...
        'FontColor', appColors.lightText, 'HorizontalAlignment', 'center');
    
    % Preview panel
    previewPanelHeight = 100;
    previewPanel = uipanel(fig, 'Title', 'Preview', ...
                          'Position', [10 315 480 previewPanelHeight], ...
                          'TitlePosition', 'centertop', ...
                          'FontWeight', 'bold', 'FontSize', 14, ...
                          'BackgroundColor', appColors.panelBg);
    
    % Create UIHTML component for the preview
    previewHTML = uihtml(previewPanel, 'Position', [10 5 460 70], ...
        'HTMLSource', '<html><body style="font-size:16px; text-align:center;"></body></html>');
    
    % Coefficient input panel
    coeffPanelHeight = 150;
    inputPanel = uipanel(fig, 'Title', 'Coefficient Input', ...
                        'Position', [10 155 480 coeffPanelHeight], ...
                        'TitlePosition', 'centertop', ...
                        'FontWeight', 'bold', 'FontSize', 14, ...
                        'BackgroundColor', appColors.panelBg);
    
    % Numerator label and field
    uilabel(inputPanel, 'Text', 'Numerator:', ...
           'Position', [20 100 150 22], ...
           'FontColor', appColors.text, 'FontSize', 12);
    editNum = uieditfield(inputPanel, 'text', 'Position', [20 70 440 30], ...
                         'BackgroundColor', [1 1 1], ...
                         'HorizontalAlignment', 'center', ...
                         'FontSize', 12);
    
    % Denominator label and field
    uilabel(inputPanel, 'Text', 'Denominator:', ...
           'Position', [20 40 150 22], ...
           'FontColor', appColors.text, 'FontSize', 12);
    editDen = uieditfield(inputPanel, 'text', 'Position', [20 10 440 30], ...
                         'BackgroundColor', [1 1 1], ...
                         'HorizontalAlignment', 'center', ...
                         'FontSize', 12);
    
    % Button panel
    buttonPanelHeight = 130;
    buttonPanel = uipanel(fig, 'Position', [10 15 480 buttonPanelHeight], ...
                         'BackgroundColor', appColors.panelBg);
    
    % Horizontal center of the panel and button dimensions
    centerX = 240;
    buttonWidth = 120;
    buttonHeight = 40;
    
    % Button layout - rearranged as requested: Preview, Confirm, Cancel
    % Preview button (left)
    previewBtn = uibutton(buttonPanel, 'push', 'Text', 'Preview', ...
                         'Position', [centerX-180 70 buttonWidth buttonHeight], ...
                         'ButtonPushedFcn', @(btn,event) previewCallback(), ...
                         'BackgroundColor', appColors.primary, ...
                         'FontColor', appColors.lightText, ...
                         'FontSize', 14);
    
    % Confirm button (middle)
    confirmBtn = uibutton(buttonPanel, 'push', 'Text', 'Confirm', ...
                         'Position', [centerX-60 70 buttonWidth buttonHeight], ...
                         'ButtonPushedFcn', @(btn,event) confirmCallback(), ...
                         'BackgroundColor', appColors.confirm, ...
                         'FontColor', appColors.lightText, ...
                         'FontSize', 14);
    
    % Cancel button (right)
    cancelBtn = uibutton(buttonPanel, 'push', 'Text', 'Cancel', ...
                        'Position', [centerX+60 70 buttonWidth buttonHeight], ...
                        'ButtonPushedFcn', @(btn,event) cancelCallback(), ...
                        'BackgroundColor', appColors.cancel, ...
                        'FontColor', appColors.lightText, ...
                        'FontSize', 14);
    
    % Input Help button (below Confirm)
    helpBtn = uibutton(buttonPanel, 'push', 'Text', 'Input Help', ...
                      'Position', [centerX-60 20 buttonWidth buttonHeight], ...
                      'ButtonPushedFcn', @(btn,event) showHelpDialog(), ...
                      'BackgroundColor', appColors.primary, ...
                      'FontColor', appColors.lightText, ...
                      'FontSize', 14);
    
    % Initialize output
    G = [];
    
    % Initialize with empty fields (no examples)
    editNum.Value = '';
    editDen.Value = '';
    
    % No initial preview call
    
    % Help dialog function
    function showHelpDialog()
        helpFig = uifigure('Name', 'Coefficient Entry Help', ...
                           'Position', [150 150 450 350], ...
                           'Color', appColors.background);
        
        % Title panel for help dialog
        helpTitlePanel = uipanel(helpFig, 'Position', [10 300 430 40], ...
                               'BackgroundColor', appColors.panelHeader, ...
                               'BorderType', 'none');
        helpTitleLabel = uilabel(helpTitlePanel, 'Text', 'Transfer Function Help', ...
            'Position', [10 5 410 30], 'FontSize', 16, 'FontWeight', 'bold', ...
            'FontColor', appColors.lightText, 'HorizontalAlignment', 'center');
        
        % Create a text area with instructions
        helpText = uitextarea(helpFig, ...
            'Position', [20 60 410 230], ...
            'Value', {'Transfer Function Coefficient Entry Guide:', ...
                      '-------------------------------------------', ...
                      '', ...
                      '• Format: Enter space-separated coefficients in descending order of power', ...
                      '', ...
                      '• Numerator Examples:', ...
                      '  - For 5s² + 3: Enter "5 0 3"', ...
                      '  - For 7s³ + 2s + 5: Enter "7 0 2 5"', ...
                      '  - For -3s + 4: Enter "-3 4"', ...
                      '', ...
                      '• Denominator Examples:', ...
                      '  - For s² + 3s + 7: Enter "1 3 7"', ...
                      '  - For 2s³ + 5s: Enter "2 0 5 0"', ...
                      '', ...
                      '• Decimal Numbers:', ...
                      '  - Both 0.5 and 0,5 are accepted', ...
                      '', ...
                      '• Remember:', ...
                      '  - The system expects the FULL polynomial, including zero coefficients', ...
                      '  - Always include the coefficient for the highest power'}, ...
            'Editable', 'off', ...
            'FontSize', 12, ...
            'BackgroundColor', appColors.panelBg);
        
        % Close button
        uibutton(helpFig, 'push', 'Text', 'Close', ...
                 'Position', [175 20 100 30], ...
                 'ButtonPushedFcn', @(btn,event) close(helpFig), ...
                 'BackgroundColor', appColors.primary, ...
                 'FontColor', appColors.lightText);
    end
    
    % Callback for the Preview button: update the HTML preview
    function previewCallback()
        % Retrieve input from the edit fields
        numStr = editNum.Value;
        denStr = editDen.Value;
        
        % Allow decimal commas by replacing commas with periods
        numStr = strrep(numStr, ',', '.');
        denStr = strrep(denStr, ',', '.');
        
        % Convert input strings to numeric vectors
        numVec = str2num(numStr);  %#ok<ST2NM>
        denVec = str2num(denStr);  %#ok<ST2NM>
        
        if isempty(numVec) || isempty(denVec) || any(isnan(numVec)) || any(isnan(denVec))
            previewHTML.HTMLSource = '<html><body style="font-size:16px; text-align:center; color:red;">Invalid input. Please check your coefficients.</body></html>';
        else
            % Convert the coefficient vectors to an HTML-formatted polynomial string
            numHTML = polyToHTMLString(numVec);
            denHTML = polyToHTMLString(denVec);
            
            % Create an HTML fraction with improved styling
            htmlContent = ['<html><head><style>', ...
                'body { display: flex; justify-content: center; align-items: center; height: 100%; margin: 0; padding: 0; }', ...
                '.fraction { display: inline-block; vertical-align: middle; margin: 0 auto; text-align: center; }', ...
                '.fraction .num { border-bottom: 1px solid black; padding: 5px 15px; font-size: 16px; }', ...
                '.fraction .den { padding: 5px 15px; font-size: 16px; }', ...
                '</style></head><body>', ...
                '<div class="fraction">', ...
                '<div class="num">', numHTML, '</div>', ...
                '<div class="den">', denHTML, '</div>', ...
                '</div>', ...
                '</body></html>'];
            
            previewHTML.HTMLSource = htmlContent;
        end
    end

    % Callback for the Confirm button: validate the input and create the transfer function
    function confirmCallback()
        numStr = strrep(editNum.Value, ',', '.');
        denStr = strrep(editDen.Value, ',', '.');
        numVec = str2num(numStr);  %#ok<ST2NM>
        denVec = str2num(denStr);  %#ok<ST2NM>
        if isempty(numVec) || isempty(denVec) || any(isnan(numVec)) || any(isnan(denVec))
            uialert(fig, 'Invalid input. Please enter valid coefficient vectors.', 'Error');
        else
            G = tf(numVec, denVec);
            uiresume(fig);
            delete(fig);
        end
    end

    % Callback for the Cancel button: close the window without creating a transfer function
    function cancelCallback()
        disp('Operation cancelled by user.');
        G = [];
        uiresume(fig);
        delete(fig);
    end

    % Handle figure close request
    fig.CloseRequestFcn = @(src, event) cancelCallback();

    % Block execution until the figure is closed
    uiwait(fig);
end

function polyStr = polyToHTMLString(coeff)
    % POLYTOHTMLSTRING - Generates HTML string for polynomial display
    % This helper function converts a vector of polynomial coefficients into an
    % HTML-formatted string. Exponents are rendered using <sup> tags.
    
    % Remove any leading zeros to get the correct degree
    idx = find(coeff ~= 0, 1, 'first');
    if isempty(idx)
        polyStr = '0';
        return;
    end
    coeff = coeff(idx:end);
    
    deg = length(coeff) - 1;  % Determine the degree of the polynomial
    terms = {};  % Cell array to store individual terms
    
    % Iterate over all coefficients
    for i = 1:length(coeff)
        coef = coeff(i);
        exp = deg - (i - 1);  % Determine the exponent for the current term
        
        % Skip zero coefficients as they don't affect the expression
        if coef == 0
            continue;
        end
        
        % Handle signs: add " + " if not the first term
        if coef > 0 && ~isempty(terms)
            term = ' + ';
        elseif coef < 0
            term = ' - ';
            coef = abs(coef);  % Use absolute value for display
        else
            term = '';
        end
        
        % Show the coefficient unless it's 1 and not the constant term (exp==0)
        if coef ~= 1 || exp == 0
            term = strcat(term, num2str(coef));
        end
        
        % Add "s" and superscript for exponents greater than 0
        if exp > 1
            term = strcat(term, 's<sup>', num2str(exp), '</sup>');
        elseif exp == 1
            term = strcat(term, 's');
        end
        
        % Add the formatted term to the cell array
        terms{end + 1} = term;
    end
    
    % Join all terms into a single string
    polyStr = strjoin(terms, '');
    
    % If all coefficients are zero, return "0"
    if isempty(polyStr)
        polyStr = '0';
    end
end